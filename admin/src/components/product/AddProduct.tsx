// src/components/AddProductForm.tsx
import React, { useState, useEffect } from "react";
import addProductApi from "../../apis/products/addProduct.api";
import slugify from "react-slugify";
import { toast } from "react-toastify";
import getErrorMsg from "../../utility/getErrorMsg";
import imageCompression from "browser-image-compression";

const AddProductForm = () => {
  const [productData, setProductData] = useState({
    product_name: "",
    url_slug: "",
    categorie_id: null,
    description: "",
    price: "",
    stock_quantity: 0,
    status: "active",
  });

  const [descriptionData, setDescriptionData] = useState({
    title: "",
    author: "",
    genre: "",
    pages: "",
    isbn: "",
    publisher: "",
    language: "",
    format: "",
    edition: "",
    keywords: "",
    tags: "",
  });

  const [compressedImage, setCompressedImage] = useState<File | null>(null);
  const [imagePreview, setImagePreview] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");
  const [isSlugAutoGenerated, setIsSlugAutoGenerated] = useState(true);

  useEffect(() => {
    if (isSlugAutoGenerated && productData.product_name) {
      setProductData((prev) => ({
        ...prev,
        url_slug: slugify(prev.product_name),
      }));
    }
  }, [productData.product_name, isSlugAutoGenerated]);

  const handleInputChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement
    >
  ) => {
    const { name, value } = e.target;
    setProductData({
      ...productData,
      [name]: name === "price" || name === "stock_quantity" ? value : value,
    });
  };

  const handleDescriptionChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setDescriptionData({ ...descriptionData, [name]: value });
  };

  const handleImageChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const file = e.target.files[0];

      // Validate the initial file size
      if (file.size > 500 * 1024) {
        // 500 KB size limit for uncompressed images
        toast.error("The selected image is too large.");
        return;
      }

      setImagePreview(URL.createObjectURL(file));

      // Compress the image
      try {
        const options = {
          maxSizeMB: 0.1, // Max size 100 KB
          // maxWidthOrHeight: 800, // Optional: resize to this width/height
          useWebWorker: true,
        };
        const compressedFile = await imageCompression(file, options);

        if (compressedFile.size > 100 * 1024) {
          toast.error(
            "Compressed image size exceeds 100 KB. Please choose a smaller image."
          );
          return;
        }
        setCompressedImage(compressedFile);
        setImagePreview(URL.createObjectURL(compressedFile));
      } catch (error) {
        toast.error("Failed to compress image.");
        console.error(error);
      }
    }
  };

  const generateDescription = () => {
    return Object.entries(descriptionData)
      .filter(([key, value]) => key !== "isbn" || value) // Ignore empty ISBN
      .map(
        ([key, value]) =>
          `${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}`
      )
      .join("\n");
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage("");

    if (!compressedImage) {
      setMessage("Product image is required.");
      setLoading(false);
      return;
    }

    try {
      await addProductApi({
        ...productData,
        description: generateDescription(),
        price: parseFloat(productData.price),
        product_image: compressedImage,
      });
      setMessage("Product added successfully!");
      toast.success("Product added successfully!");
      resetForm();
    } catch (error: any) {
      if (error.status &&  error?.status === 577 || error?.status === 477) {
        toast.error("Session Expired Login Again.");
      } else {
        const errorMsg = getErrorMsg(error, null, "adding product");
        toast.error(errorMsg);
        setMessage(
          error?.message || "An error occurred while adding the product."
        );
        console.error(error);
      }
    } finally {
      setLoading(false);
    }
  };

  const resetForm = () => {
    setProductData({
      product_name: "",
      url_slug: "",
      categorie_id: null,
      description: "",
      price: "",
      stock_quantity: 0,
      status: "active",
    });
    setDescriptionData({
      title: "",
      author: "",
      genre: "",
      pages: "",
      isbn: "",
      publisher: "",
      language: "",
      format: "",
      edition: "",
      keywords: "",
      tags: "",
    });
    setCompressedImage(null);
    setImagePreview(null);
  };

  return (
    <div className="max-w-2xl mx-auto p-8 shadow-md bg-base-100 rounded-lg mt-10">
      <h2 className="text-3xl font-bold mb-5">Add New Product</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <label>
          Product Name
          <input
            type="text"
            name="product_name"
            placeholder="Enter the book title"
            value={productData.product_name}
            onChange={handleInputChange}
            className="input input-bordered w-full"
            required
          />
        </label>

        <div className="relative">
          <label>
            URL Slug
            <input
              type="text"
              name="url_slug"
              placeholder="URL Slug"
              value={productData.url_slug}
              onChange={(e) => {
                setIsSlugAutoGenerated(false);
                handleInputChange(e);
              }}
              className="input input-bordered w-full"
              required
            />
          </label>
          <label className="cursor-pointer flex justify-center text-sm absolute bottom-3 right-3">
            <input
              type="checkbox"
              checked={isSlugAutoGenerated}
              onChange={() => setIsSlugAutoGenerated(!isSlugAutoGenerated)}
              className="checkbox checkbox-sm mr-2"
            />
            Auto-generate
          </label>
        </div>

        <label>
          Category ID
          <input
            type="number"
            name="categorie_id"
            placeholder="Category ID"
            value={productData.categorie_id ?? ""}
            onChange={handleInputChange}
            className="input input-bordered w-full"
            required
          />
        </label>

        <div>
          {Object.entries(descriptionData).map(([key, value]) => (
            <label key={key} className="block">
              {key.charAt(0).toUpperCase() + key.slice(1)}
              <input
                type="text"
                name={key}
                placeholder={`Enter ${key}`}
                value={value}
                onChange={handleDescriptionChange}
                className="input input-bordered w-full mt-1"
                required={key !== "isbn"}
              />
            </label>
          ))}
        </div>

        <label>
          Image
          <input
            type="file"
            name="product_image"
            accept="image/*"
            onChange={handleImageChange}
            className="file-input w-full"
            required
          />
          {imagePreview && (
            <img
              src={imagePreview}
              alt="Product Preview"
              className="mt-4 w-32 h-32 object-cover"
            />
          )}
        </label>

        <button
          type="submit"
          className={`btn btn-primary w-full ${loading ? "loading" : ""}`}
          disabled={loading}
        >
          Add Product
        </button>
        {message && <p className="text-sm mt-3 text-center">{message}</p>}
      </form>
    </div>
  );
};

export default AddProductForm;
