// src/components/AddProductForm.tsx
import React, { useState, useEffect } from 'react';
import addProductApi from '../../apis/products/addProduct.api';
import slugify from 'react-slugify';

const AddProductForm = () => {
  const [productData, setProductData] = useState({
    product_name: '',
    url_slug: '',
    categorie_id: null,
    description: '',
    price: '',
    stock_quantity: 0,
    status: 'active',
  });

  const [productImage, setProductImage] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [isSlugAutoGenerated, setIsSlugAutoGenerated] = useState(true);

  useEffect(() => {
    if (isSlugAutoGenerated && productData.product_name) {
      setProductData((prev) => ({
        ...prev,
        url_slug: slugify(prev.product_name),
      }));
    }
  }, [productData.product_name, isSlugAutoGenerated]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setProductData({
      ...productData,
      [name]: name === 'price' || name === 'stock_quantity' ? value : value,
    });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setProductImage(e.target.files[0]);
    }
  };

  const formatPriceToINR = (value: string) => {
    return new Intl.NumberFormat('en-IN', {
      style: 'currency',
      currency: 'INR',
    }).format(parseFloat(value || '0'));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    if (!productImage) {
      setMessage('Product image is required.');
      setLoading(false);
      return;
    }

    try {
      await addProductApi({
        ...productData,
        price: parseFloat(productData.price),
        product_image: productImage,
      });
      setMessage('Product added successfully!');
      setProductData({
        product_name: '',
        url_slug: '',
        categorie_id: null,
        description: '',
        price: '',
        stock_quantity: 0,
        status: 'active',
      });
      setProductImage(null);
    } catch (error: any) {
      setMessage(error?.message || 'An error occurred while adding the product.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-8 shadow-md bg-base-100 rounded-lg mt-10">
      <h2 className="text-3xl font-bold mb-5">Add New Product</h2>
      <form onSubmit={handleSubmit} className="space-y-6">
        <input
          type="text"
          name="product_name"
          placeholder="Product Name"
          value={productData.product_name}
          onChange={handleInputChange}
          className="input input-bordered w-full"
          required
        />
        <div className="relative">
          <input
            type="text"
            name="url_slug"
            placeholder="URL Slug"
            value={productData.url_slug}
            onChange={(e) => {
              setIsSlugAutoGenerated(false);
              handleInputChange(e);
            }}
            className="input input-bordered w-full"
            required
          />
          <label className="cursor-pointer text-sm absolute top-2 right-3">
            <input
              type="checkbox"
              checked={isSlugAutoGenerated}
              onChange={() => setIsSlugAutoGenerated(!isSlugAutoGenerated)}
              className="checkbox checkbox-sm mr-2"
            />
            Auto-generate
          </label>
        </div>
        <input
          type="number"
          name="categorie_id"
          placeholder="Category ID"
          value={productData.categorie_id ?? ''}
          onChange={handleInputChange}
          className="input input-bordered w-full"
          required
        />
        <textarea
          name="description"
          placeholder="Description"
          value={productData.description}
          onChange={handleInputChange}
          className="textarea textarea-bordered w-full"
        />
        <div className="flex items-center">
          <input
            type="text"
            name="price"
            placeholder="Price"
            value={productData.price}
            onChange={handleInputChange}
            className="input input-bordered w-full"
            required
          />
          <span className="ml-4 text-lg font-semibold">{formatPriceToINR(productData.price)}</span>
        </div>
        <input
          type="number"
          name="stock_quantity"
          placeholder="Stock Quantity"
          value={productData.stock_quantity}
          onChange={handleInputChange}
          className="input input-bordered w-full"
        />
        <select
          name="status"
          value={productData.status}
          onChange={handleInputChange}
          className="select select-bordered w-full"
          required
        >
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
        <input type="file" accept="image/*" onChange={handleImageChange} className="file-input w-full" required />
        <button type="submit" className={`btn btn-primary w-full ${loading ? 'loading' : ''}`} disabled={loading}>
          Add Product
        </button>
        {message && <p className="text-sm mt-3 text-center">{message}</p>}
      </form>
    </div>
  );
};

export default AddProductForm;
